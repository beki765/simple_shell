.TH hsh 1 "May 14, 2022" "1.0" "hsh General Commands Manual"

.SH NAME

.B simple_shell - hsh
- command line interpreter or shell


.SH SYNOPSIS
#include "shell_main.h"
.PP
int main(int __attribute__((unused))ac, char **av, char **env)
.PP
.hsh
.SH DESCRIPTION
The hsh executable is the file that creates a standard command interpreter within the current shell. The current version of hsh is close to how the sh command in bash is configured. While it has many similarities and features closely related to the Bourne Shell, it is by no means a exact clone of the the Bourne Shell. Only features that take in simple commands like "ls" are incorated into the hsh shell. 
.PP
.SH OVERVIEW
The hsh shell is a executable file that reads lines from either a file or the terminal, then interprets them, and generally executes commands if inputed by the user in stdin. It will create a sub-shell within the current shell program that is running when a user logs into their system. Like the Bourne Shell, commands can be typed directly to the running hsh shell -interactive mode- or can be put into a file and the file can be executed outside of the shell with the | (pipeline) operator in non-interactive mode.
.SH INVOCATION
If the hsh shell has been executed beforehand with ./hsh and afterwards has only the prompt($) appearing with awaiting input for the command line to read, then the hsh shell is in  interactive mode. An interactive shell generally has a prompt($) displayed before each command can be entered into stdin. 
.PP
If stdin is placed outide the shell with a | pipleline operator used to connect a command like -echo "/bin/ls" | ./hsh- then the shell will be considered in non-interactive mode.
.PP
The shell will always read commands from the standard input.
.SH RETURN
Upon successful return, the shell will always return a 0 for success. However, if the hsh shell fails when a command is not inputed correctly or does not exist within the $PATH, then our hsh shell will exit out of the child process and display an error message corresponding to the error the user committed. And then loop back to the parent process awaiting for input.
.SH LEXICAL STRUCTURE
The hsh shell reads input in terms of lines from a file and breaks it up into words at whitespace (whether they be blanks or tabs).
.PP
.SH BUILT-INS
.IP
env - When entered, it will Print the current environment.
.PP
.IP
exit - When entered, it will Exit the user out of our custom shell. You can double check if the built-in command worked by typing in echo $? and see if the out is the number you typed after the exit built-in. If the default exit is used, the number will always be 1.
.PP
.IP
setenv - When entered, it will initialize a new environment variable, or modify an existing one. Should print something on stderr upon failure.
.PP
.IP
unsetenv - When entered, it will remove an environment variable. Should print something on stderr upon failure.
.PP
.IP
cd - When entered, it will change the current directory of the process. If no argument is given to cd the command will be interpreted like cd $HOME.
.PP

.SH BUGS
Our shell has memory leaks. Please use at your own risk. As well as the setenv and unsetenv wil not work as expected when compared to their C library versions.
.PP
.SH EXAMPLE
.IP

-----Non-Interactive Mode-----
.IP
$ echo "/bin/ls" | ./hsh
.PP
.IP
hsh main.c shell.c test_ls_2
.PP
.IP
$ cat test_ls_2
.PP
.IP
/bin/ls
.PP
.IP
/bin/ls
.PP
.IP
$ cat test_ls_2 | ./hsh
.PP
.IP
hsh main.c shell.c test_ls_2
.PP
.IP
hsh main.c shell.c test_ls_2
.PP
.IP
$
.PP
.IP

-----Interatcive Mode-----
.PP
.IP
$ ./hsh
.PP
.IP
($) /bin/ls
.PP
.IP
hsh main.c shell.c
.PP
.IP
($)
.PP
.IP
($) exit
.PP
.IP
$
.PP
.SH EXITING
To exit out of our custom shell. You can use either CTRL + D, or CTRL + Z or by typing in the built-in exit to the command line after the $ prompt.
.PP
Do take note that our shell ignores the CTRL + C signal. As such, when entered the shell will print out the signal as ^C and still keep you inside the shell in interactive mode. Please use the 3 above inputs to exit our shell safely.
.SH NOTES

All files and code used to create our shell (./hsh) were created and compiled on Ubuntu 14.04.4 LTS using GCC 4.8.4
.SH SEE ALSO
man sh, access(2), chdir(2), closedir(3), execve(3), exit(3), fork(2), free(3), getcwd(3), getline(3), isatty(3), malloc(3), opendir(3), perror(3), readdir(3), signal(2), stat(2), strtok(3), wait(2), write(2)

.SH AUTHOR


Bereket Gebeyeu <bereketgebeyehu77@.com>
Dagim Tezera <dagimtezera@gmail.com>


